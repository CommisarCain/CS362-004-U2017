        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   120210:    8:int compare(const void* a, const void* b) {
   120210:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
   120210:   11:  if (*(int*)a < *(int*)b)
    32056:   12:    return -1;
    88154:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     4007:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
     4007:   44:  SelectStream(1);
     4007:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
     4007:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4007:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    44077:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   440770:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   400700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4007:   73:  if (numPlayers == 2)
        -:   74:    {
     4007:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4007:   87:  if (numPlayers == 2)
        -:   88:    {
     4007:   89:      state->supplyCount[estate] = 8;
     4007:   90:      state->supplyCount[duchy] = 8;
     4007:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4007:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4007:  102:  state->supplyCount[silver] = 40;
     4007:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    84147:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   705232:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   657148:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    32056:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    16028:  115:		  if (numPlayers == 2){
     8014:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    24042:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    32056:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   625092:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    12021:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     8014:  140:      state->deckCount[i] = 0;
    32056:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    24042:  143:	  state->deck[i][j] = estate;
    24042:  144:	  state->deckCount[i]++;
        -:  145:	}
    64112:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    56098:  148:	  state->deck[i][j] = copper;
    56098:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    12021:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     8014:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    12021:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
     8014:  166:      state->handCount[i] = 0;
     8014:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
   112196:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
   108189:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4007:  182:  state->outpostPlayed = 0;
     4007:  183:  state->phase = 0;
     4007:  184:  state->numActions = 1;
     4007:  185:  state->numBuys = 1;
     4007:  186:  state->playedCardCount = 0;
     4007:  187:  state->whoseTurn = 0;
     4007:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    24042:  192:  for (it = 0; it < 5; it++){
    20035:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     4007:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     4007:  198:  return 0;
        -:  199:}
        -:  200:
     8014:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     8014:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     8014:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     8014:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    96168:  214:  while (state->deckCount[player] > 0) {
    80140:  215:    card = floor(Random() * state->deckCount[player]);
    80140:  216:    newDeck[newDeckPos] = state->deck[player][card];
    80140:  217:    newDeckPos++;
   228399:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   148259:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    80140:  221:    state->deckCount[player]--;
        -:  222:  }
    88154:  223:  for (i = 0; i < newDeckPos; i++) {
    80140:  224:    state->deck[player][i] = newDeck[i];
    80140:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     8014:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state){
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
        -:  249:
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:
    #####:  268:  return 0;
        -:  269:}
        -:  270:
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:
    #####:  307:  return 0;
        -:  308:}
        -:  309:
    #####:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
    #####:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
    #####:  319:int supplyCount(int card, struct gameState *state) {
    #####:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
    #####:  345:int whoseTurn(struct gameState *state) {
    #####:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
    #####:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
    #####:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
        -:  404:	{
    #####:  405:	  j++;
        -:  406:	}
        -:  407:    }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
        -:  414:}
        -:  415:
    #####:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:	{
    #####:  468:	  players[i] = -9999;
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
        -:  481:	{
    #####:  482:	  j = i;
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
        -:  492:	{
    #####:  493:	  players[i]++;
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
        -:  502:	{
    #####:  503:	  j = i;
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
        -:  512:	{
    #####:  513:	  players[i] = 1;
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
    32041:  524:int drawCard(int player, struct gameState *state){
        -:  525:  int count;
        -:  526:  int deckCounter;
    32041:  527:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  528:
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
    #####:  532:    for (i = 0; i < state->discardCount[player];i++){
    #####:  533:      state->deck[player][i] = state->discard[player][i];
    #####:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
    #####:  537:    state->deckCount[player] = state->discardCount[player];
    #####:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
    #####:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:
    #####:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
    #####:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:
    #####:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
    #####:  558:    if (deckCounter == 0)
    #####:  559:      return -1;
        -:  560:
    #####:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  562:    state->deckCount[player]--;
    #####:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
    32041:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
    32041:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
    32041:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    32041:  575:    state->deckCount[player]--;
    32041:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
    32041:  579:  return 0;
        -:  580:}
        -:  581:
    #####:  582:int getCost(int cardNumber){
    #####:  583:  switch( cardNumber )
        -:  584:    {
        -:  585:    case curse:
    #####:  586:      return 0;
        -:  587:    case estate:
    #####:  588:      return 2;
        -:  589:    case duchy:
    #####:  590:      return 5;
        -:  591:    case province:
    #####:  592:      return 8;
        -:  593:    case copper:
    #####:  594:      return 0;
        -:  595:    case silver:
    #####:  596:      return 3;
        -:  597:    case gold:
    #####:  598:      return 6;
        -:  599:    case adventurer:
    #####:  600:      return 6;
        -:  601:    case council_room:
    #####:  602:      return 5;
        -:  603:    case feast:
    #####:  604:      return 4;
        -:  605:    case gardens:
    #####:  606:      return 4;
        -:  607:    case mine:
    #####:  608:      return 5;
        -:  609:    case remodel:
    #####:  610:      return 4;
        -:  611:    case smithy:
    #####:  612:      return 4;
        -:  613:    case village:
    #####:  614:      return 3;
        -:  615:    case baron:
    #####:  616:      return 4;
        -:  617:    case great_hall:
    #####:  618:      return 3;
        -:  619:    case minion:
    #####:  620:      return 5;
        -:  621:    case steward:
    #####:  622:      return 3;
        -:  623:    case tribute:
    #####:  624:      return 5;
        -:  625:    case ambassador:
    #####:  626:      return 3;
        -:  627:    case cutpurse:
    #####:  628:      return 4;
        -:  629:    case embargo:
    #####:  630:      return 2;
        -:  631:    case outpost:
    #####:  632:      return 5;
        -:  633:    case salvager:
    #####:  634:      return 4;
        -:  635:    case sea_hag:
    #####:  636:      return 4;
        -:  637:    case treasure_map:
    #####:  638:      return 4;
        -:  639:    }
        -:  640:
    #####:  641:  return -1;
        -:  642:}
        -:  643:
     4000:  644:int adventurerCardEffect(struct gameState *state, int currentPlayer, int handPos ){
        -:  645:  int i;
        -:  646:  int j;
        -:  647:  int k;
        -:  648:  int x;
        -:  649:  int index;
     4000:  650:  int nextPlayer = currentPlayer + 1;
        -:  651:
     4000:  652:  int tributeRevealedCards[2] = {-1, -1};
        -:  653:  int temphand[MAX_HAND];// moved above the if statement
     4000:  654:  int drawntreasure = 0;
        -:  655:  int cardDrawn;
     4000:  656:  int z = 0;// this is the counter for the temp hand
     4000:  657:  if (nextPlayer > (state->numPlayers - 1)){
     4000:  658:    nextPlayer = 0;
        -:  659:  }
        -:  660:
    20000:  661:  while(drawntreasure<2){
    12000:  662:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  663:  shuffle(currentPlayer, state);
        -:  664:  }
    12000:  665:  drawCard(currentPlayer, state);
    12000:  666:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    12000:  667:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     8000:  668:  drawntreasure++;
        -:  669:  else{
     4000:  670:  temphand[z]=cardDrawn;
     4000:  671:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     4000:  672:  z++;
        -:  673:  }
        -:  674:    }
    12000:  675:    while(z-1>=0){
     4000:  676:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     4000:  677:  z=z-1;
        -:  678:    }
     4000:  679:    return 1;
        -:  680:
        -:  681:
        -:  682:
        -:  683:}
        -:  684:
        3:  685:int smithyCardEffect(struct gameState *state, int currentPlayer, int handPos ){
        -:  686:  int i;
        -:  687:  //+3 Cards
        9:  688:  for (i = 0; i < 2; i++)//should be < 3 BUGGGGGGG
        -:  689:  {
        6:  690:      drawCard(currentPlayer, state);
        -:  691:  }
        -:  692:
        -:  693:  //discard card from hand
        3:  694:  discardCard(handPos, currentPlayer, state, 0);
        3:  695:  return 0;
        -:  696:
        -:  697:}
        -:  698:
    #####:  699:int greathallCardEffect(struct gameState *state, int currentPlayer, int handPos ){
        -:  700:  int i;
        -:  701:  int j;
        -:  702:  int k;
        -:  703:  int x;
        -:  704:  int index;
    #####:  705:  int nextPlayer = currentPlayer + 1;
        -:  706:
    #####:  707:  int tributeRevealedCards[2] = {-1, -1};
        -:  708:  int temphand[MAX_HAND];// moved above the if statement
    #####:  709:  int drawntreasure=0;
        -:  710:  int cardDrawn;
    #####:  711:  int z = 0;// this is the counter for the temp hand
    #####:  712:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  713:    nextPlayer = 0;
        -:  714:  }
        -:  715:  //+1 Card
    #####:  716:  drawCard(currentPlayer, state);
        -:  717:
        -:  718:  //+1 Actions
        -:  719:  //state->numActions++;
        -:  720:
        -:  721:  //discard card from hand
    #####:  722:  discardCard(handPos, currentPlayer, state, 0);
    #####:  723:  return 0;
        -:  724:
        -:  725:}
        -:  726:
        4:  727:int outpostCardEffect(struct gameState *state, int currentPlayer, int handPos  ){
        -:  728:  int i;
        -:  729:  int j;
        -:  730:  int k;
        -:  731:  int x;
        -:  732:  int index;
        4:  733:  int nextPlayer = currentPlayer + 1;
        -:  734:
        4:  735:  int tributeRevealedCards[2] = {-1, -1};
        -:  736:  int temphand[MAX_HAND];// moved above the if statement
        4:  737:  int drawntreasure=0;
        -:  738:  int cardDrawn;
        4:  739:  int z = 0;// this is the counter for the temp hand
        4:  740:  if (nextPlayer > (state->numPlayers - 1)){
        -:  741:    //nextPlayer = 0;
        -:  742:  }
        -:  743:  //set outpost flag
        -:  744:  //state->outpostPlayed++;// BUG THIS SHOULD NOT BE COMMENTED
        -:  745:
        -:  746:  //discard card
        4:  747:  discardCard(handPos, currentPlayer, state, 0);
        4:  748:  return 0;
        -:  749:
        -:  750:}
        -:  751:
    #####:  752:int salvagerCardEffect(struct gameState *state, int currentPlayer, int handPos, int choice1   ){
        -:  753:  int i;
        -:  754:  int j;
        -:  755:  int k;
        -:  756:  int x;
        -:  757:  int index;
    #####:  758:  int nextPlayer = currentPlayer + 1;
        -:  759:
    #####:  760:  int tributeRevealedCards[2] = {-1, -1};
        -:  761:  int temphand[MAX_HAND];// moved above the if statement
    #####:  762:  int drawntreasure=0;
        -:  763:  int cardDrawn;
    #####:  764:  int z = 0;// this is the counter for the temp hand
    #####:  765:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  766:    nextPlayer = 0;
        -:  767:  }
        -:  768:  //+1 buy
    #####:  769:  state->numBuys++;
        -:  770:
    #####:  771:  if (choice1)
        -:  772:  {
        -:  773:  //gain coins equal to trashed card
    #####:  774:  state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  775:  //trash card
    #####:  776:  discardCard(choice1, currentPlayer, state, 1);
        -:  777:  }
        -:  778:
        -:  779:  //discard card
    #####:  780:  discardCard(handPos, currentPlayer, state, 0);
    #####:  781:  return 0;
        -:  782:
        -:  783:
        -:  784:
        -:  785:}
        -:  786:
    #####:  787:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  788:  int i;
        -:  789:  int j;
        -:  790:  int k;
        -:  791:  int x;
        -:  792:  int index;
    #####:  793:  int currentPlayer = whoseTurn(state);
    #####:  794:  int nextPlayer = currentPlayer + 1;
        -:  795:
    #####:  796:  int tributeRevealedCards[2] = {-1, -1};
        -:  797:  int temphand[MAX_HAND];// moved above the if statement
    #####:  798:  int drawntreasure=0;
        -:  799:  int cardDrawn;
    #####:  800:  int z = 0;// this is the counter for the temp hand
    #####:  801:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  802:    nextPlayer = 0;
        -:  803:  }
        -:  804:
        -:  805:
        -:  806:  //uses switch to select card and perform actions
    #####:  807:  switch( card )
        -:  808:    {
        -:  809:    case adventurer:
    #####:  810:        return adventurerCardEffect(state, currentPlayer, handPos);
        -:  811:
        -:  812:    case council_room:
        -:  813:      //+4 Cards
    #####:  814:      for (i = 0; i < 4; i++)
        -:  815:    {
    #####:  816:    drawCard(currentPlayer, state);
        -:  817:    }
        -:  818:
        -:  819:      //+1 Buy
    #####:  820:      state->numBuys++;
        -:  821:
        -:  822:      //Each other player draws a card
    #####:  823:      for (i = 0; i < state->numPlayers; i++)
        -:  824:    {
    #####:  825:    if ( i != currentPlayer )
        -:  826:      {
    #####:  827:        drawCard(i, state);
        -:  828:      }
        -:  829:    }
        -:  830:
        -:  831:    //put played card in played card pile
    #####:  832:    discardCard(handPos, currentPlayer, state, 0);
        -:  833:
    #####:  834:    return 0;
        -:  835:
        -:  836:    case feast:
        -:  837:      //gain card with cost up to 5
        -:  838:      //Backup hand
    #####:  839:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  840:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  841:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  842:      }
        -:  843:      //Backup hand
        -:  844:
        -:  845:      //Update Coins for Buy
    #####:  846:      updateCoins(currentPlayer, state, 5);
    #####:  847:      x = 1;//Condition to loop on
    #####:  848:      while( x == 1) {//Buy one card
    #####:  849:	if (supplyCount(choice1, state) <= 0){
        -:  850:	  if (DEBUG)
        -:  851:	    printf("None of that card left, sorry!\n");
        -:  852:
        -:  853:	  if (DEBUG){
        -:  854:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  855:	  }
        -:  856:	}
    #####:  857:	else if (state->coins < getCost(choice1)){
    #####:  858:	  printf("That card is too expensive!\n");
        -:  859:
        -:  860:	  if (DEBUG){
        -:  861:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  862:	  }
        -:  863:	}
        -:  864:	else{
        -:  865:
        -:  866:	  if (DEBUG){
        -:  867:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  868:	  }
        -:  869:
    #####:  870:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  871:	  x = 0;//No more buying cards
        -:  872:
        -:  873:	  if (DEBUG){
        -:  874:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  875:	  }
        -:  876:
        -:  877:	}
        -:  878:      }
        -:  879:
        -:  880:      //Reset Hand
    #####:  881:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  882:	state->hand[currentPlayer][i] = temphand[i];
    #####:  883:	temphand[i] = -1;
        -:  884:      }
        -:  885:      //Reset Hand
        -:  886:
    #####:  887:      return 0;
        -:  888:
        -:  889:    case gardens:
    #####:  890:      return -1;
        -:  891:
        -:  892:    case mine:
    #####:  893:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  894:
    #####:  895:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  896:	{
    #####:  897:	  return -1;
        -:  898:	}
        -:  899:
    #####:  900:      if (choice2 > treasure_map || choice2 < curse)
        -:  901:	{
    #####:  902:	  return -1;
        -:  903:	}
        -:  904:
    #####:  905:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  906:	{
    #####:  907:	  return -1;
        -:  908:	}
        -:  909:
    #####:  910:      gainCard(choice2, state, 2, currentPlayer);
        -:  911:
        -:  912:      //discard card from hand
    #####:  913:      discardCard(handPos, currentPlayer, state, 0);
        -:  914:
        -:  915:      //discard trashed card
    #####:  916:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  917:	{
    #####:  918:	  if (state->hand[currentPlayer][i] == j)
        -:  919:	    {
    #####:  920:	      discardCard(i, currentPlayer, state, 0);
    #####:  921:	      break;
        -:  922:	    }
        -:  923:	}
        -:  924:
    #####:  925:      return 0;
        -:  926:
        -:  927:    case remodel:
    #####:  928:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  929:
    #####:  930:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  931:	{
    #####:  932:	  return -1;
        -:  933:	}
        -:  934:
    #####:  935:      gainCard(choice2, state, 0, currentPlayer);
        -:  936:
        -:  937:      //discard card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);
        -:  939:
        -:  940:      //discard trashed card
    #####:  941:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  942:	{
    #####:  943:	  if (state->hand[currentPlayer][i] == j)
        -:  944:	    {
    #####:  945:	      discardCard(i, currentPlayer, state, 0);
    #####:  946:	      break;
        -:  947:	    }
        -:  948:	}
        -:  949:
        -:  950:
    #####:  951:      return 0;
        -:  952:
        -:  953:    case smithy:
    #####:  954:      return smithyCardEffect(state, currentPlayer, handPos );
        -:  955:
        -:  956:    case village:
        -:  957:      //+1 Card
    #####:  958:      drawCard(currentPlayer, state);
        -:  959:
        -:  960:      //+2 Actions
    #####:  961:      state->numActions = state->numActions + 2;
        -:  962:
        -:  963:      //discard played card from hand
    #####:  964:      discardCard(handPos, currentPlayer, state, 0);
    #####:  965:      return 0;
        -:  966:
        -:  967:    case baron:
    #####:  968:      state->numBuys++;//Increase buys by 1!
    #####:  969:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  970:	int p = 0;//Iterator for hand!
    #####:  971:	int card_not_discarded = 1;//Flag for discard set!
    #####:  972:	while(card_not_discarded){
    #####:  973:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  974:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  975:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  976:	    state->discardCount[currentPlayer]++;
    #####:  977:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  978:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  979:	    }
    #####:  980:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  981:	    state->handCount[currentPlayer]--;
    #####:  982:	    card_not_discarded = 0;//Exit the loop
        -:  983:	  }
    #####:  984:	  else if (p > state->handCount[currentPlayer]){
        -:  985:	    if(DEBUG) {
        -:  986:	      printf("No estate cards in your hand, invalid choice\n");
        -:  987:	      printf("Must gain an estate if there are any\n");
        -:  988:	    }
    #####:  989:	    if (supplyCount(estate, state) > 0){
    #####:  990:	      gainCard(estate, state, 0, currentPlayer);
    #####:  991:	      state->supplyCount[estate]--;//Decrement estates
    #####:  992:	      if (supplyCount(estate, state) == 0){
    #####:  993:		isGameOver(state);
        -:  994:	      }
        -:  995:	    }
    #####:  996:	    card_not_discarded = 0;//Exit the loop
        -:  997:	  }
        -:  998:
        -:  999:	  else{
    #####: 1000:	    p++;//Next card
        -: 1001:	  }
        -: 1002:	}
        -: 1003:      }
        -: 1004:
        -: 1005:      else{
    #####: 1006:	if (supplyCount(estate, state) > 0){
    #####: 1007:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1008:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1009:	  if (supplyCount(estate, state) == 0){
    #####: 1010:	    isGameOver(state);
        -: 1011:	  }
        -: 1012:	}
        -: 1013:      }
        -: 1014:
        -: 1015:
    #####: 1016:      return 0;
        -: 1017:
        -: 1018:    case great_hall:
    #####: 1019:      return greathallCardEffect(state, currentPlayer, handPos );
        -: 1020:
        -: 1021:    case minion:
        -: 1022:      //+1 action
    #####: 1023:      state->numActions++;
        -: 1024:
        -: 1025:      //discard card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);
        -: 1027:
    #####: 1028:      if (choice1)		//+2 coins
        -: 1029:	{
    #####: 1030:	  state->coins = state->coins + 2;
        -: 1031:	}
        -: 1032:
    #####: 1033:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1034:	{
        -: 1035:	  //discard hand
    #####: 1036:	  while(numHandCards(state) > 0)
        -: 1037:	    {
    #####: 1038:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1039:	    }
        -: 1040:
        -: 1041:	  //draw 4
    #####: 1042:	  for (i = 0; i < 4; i++)
        -: 1043:	    {
    #####: 1044:	      drawCard(currentPlayer, state);
        -: 1045:	    }
        -: 1046:
        -: 1047:	  //other players discard hand and redraw if hand size > 4
    #####: 1048:	  for (i = 0; i < state->numPlayers; i++)
        -: 1049:	    {
    #####: 1050:	      if (i != currentPlayer)
        -: 1051:		{
    #####: 1052:		  if ( state->handCount[i] > 4 )
        -: 1053:		    {
        -: 1054:		      //discard hand
    #####: 1055:		      while( state->handCount[i] > 0 )
        -: 1056:			{
    #####: 1057:			  discardCard(handPos, i, state, 0);
        -: 1058:			}
        -: 1059:
        -: 1060:		      //draw 4
    #####: 1061:		      for (j = 0; j < 4; j++)
        -: 1062:			{
    #####: 1063:			  drawCard(i, state);
        -: 1064:			}
        -: 1065:		    }
        -: 1066:		}
        -: 1067:	    }
        -: 1068:
        -: 1069:	}
    #####: 1070:      return 0;
        -: 1071:
        -: 1072:    case steward:
    #####: 1073:      if (choice1 == 1)
        -: 1074:	{
        -: 1075:	  //+2 cards
    #####: 1076:	  drawCard(currentPlayer, state);
    #####: 1077:	  drawCard(currentPlayer, state);
        -: 1078:	}
    #####: 1079:      else if (choice1 == 2)
        -: 1080:	{
        -: 1081:	  //+2 coins
    #####: 1082:	  state->coins = state->coins + 2;
        -: 1083:	}
        -: 1084:      else
        -: 1085:	{
        -: 1086:	  //trash 2 cards in hand
    #####: 1087:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1088:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1089:	}
        -: 1090:
        -: 1091:      //discard card from hand
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1093:      return 0;
        -: 1094:
        -: 1095:    case tribute:
    #####: 1096:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1097:	if (state->deckCount[nextPlayer] > 0){
    #####: 1098:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1099:	  state->deckCount[nextPlayer]--;
        -: 1100:	}
    #####: 1101:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1102:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1103:	  state->discardCount[nextPlayer]--;
        -: 1104:	}
        -: 1105:	else{
        -: 1106:	  //No Card to Reveal
        -: 1107:	  if (DEBUG){
        -: 1108:	    printf("No cards to reveal\n");
        -: 1109:	  }
        -: 1110:	}
        -: 1111:      }
        -: 1112:
        -: 1113:      else{
    #####: 1114:	if (state->deckCount[nextPlayer] == 0){
    #####: 1115:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1116:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1117:	    state->deckCount[nextPlayer]++;
    #####: 1118:	    state->discard[nextPlayer][i] = -1;
    #####: 1119:	    state->discardCount[nextPlayer]--;
        -: 1120:	  }
        -: 1121:
    #####: 1122:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1123:	}
    #####: 1124:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1125:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1126:	state->deckCount[nextPlayer]--;
    #####: 1127:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1128:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1129:	state->deckCount[nextPlayer]--;
        -: 1130:      }
        -: 1131:
    #####: 1132:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1133:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1134:	state->playedCardCount++;
    #####: 1135:	tributeRevealedCards[1] = -1;
        -: 1136:      }
        -: 1137:
    #####: 1138:      for (i = 0; i <= 2; i ++){
    #####: 1139:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1140:	  state->coins += 2;
        -: 1141:	}
        -: 1142:
    #####: 1143:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1144:	  drawCard(currentPlayer, state);
    #####: 1145:	  drawCard(currentPlayer, state);
        -: 1146:	}
        -: 1147:	else{//Action Card
    #####: 1148:	  state->numActions = state->numActions + 2;
        -: 1149:	}
        -: 1150:      }
        -: 1151:
    #####: 1152:      return 0;
        -: 1153:
        -: 1154:    case ambassador:
    #####: 1155:      j = 0;		//used to check if player has enough cards to discard
        -: 1156:
    #####: 1157:      if (choice2 > 2 || choice2 < 0)
        -: 1158:	{
    #####: 1159:	  return -1;
        -: 1160:	}
        -: 1161:
    #####: 1162:      if (choice1 == handPos)
        -: 1163:	{
    #####: 1164:	  return -1;
        -: 1165:	}
        -: 1166:
    #####: 1167:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1168:	{
    #####: 1169:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1170:	    {
    #####: 1171:	      j++;
        -: 1172:	    }
        -: 1173:	}
    #####: 1174:      if (j < choice2)
        -: 1175:	{
    #####: 1176:	  return -1;
        -: 1177:	}
        -: 1178:
        -: 1179:      if (DEBUG)
        -: 1180:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1181:
        -: 1182:      //increase supply count for choosen card by amount being discarded
    #####: 1183:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1184:
        -: 1185:      //each other player gains a copy of revealed card
    #####: 1186:      for (i = 0; i < state->numPlayers; i++)
        -: 1187:	{
    #####: 1188:	  if (i != currentPlayer)
        -: 1189:	    {
    #####: 1190:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1191:	    }
        -: 1192:	}
        -: 1193:
        -: 1194:      //discard played card from hand
    #####: 1195:      discardCard(handPos, currentPlayer, state, 0);
        -: 1196:
        -: 1197:      //trash copies of cards returned to supply
    #####: 1198:      for (j = 0; j < choice2; j++)
        -: 1199:	{
    #####: 1200:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1201:	    {
    #####: 1202:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1203:		{
    #####: 1204:		  discardCard(i, currentPlayer, state, 1);
    #####: 1205:		  break;
        -: 1206:		}
        -: 1207:	    }
        -: 1208:	}
        -: 1209:
    #####: 1210:      return 0;
        -: 1211:
        -: 1212:    case cutpurse:
        -: 1213:
    #####: 1214:      updateCoins(currentPlayer, state, 2);
    #####: 1215:      for (i = 0; i < state->numPlayers; i++)
        -: 1216:	{
    #####: 1217:	  if (i != currentPlayer)
        -: 1218:	    {
    #####: 1219:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1220:		{
    #####: 1221:		  if (state->hand[i][j] == copper)
        -: 1222:		    {
    #####: 1223:		      discardCard(j, i, state, 0);
    #####: 1224:		      break;
        -: 1225:		    }
    #####: 1226:		  if (j == state->handCount[i])
        -: 1227:		    {
    #####: 1228:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1229:			{
        -: 1230:			  if (DEBUG)
        -: 1231:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1232:			}
    #####: 1233:		      break;
        -: 1234:		    }
        -: 1235:		}
        -: 1236:
        -: 1237:	    }
        -: 1238:
        -: 1239:	}
        -: 1240:
        -: 1241:      //discard played card from hand
    #####: 1242:      discardCard(handPos, currentPlayer, state, 0);
        -: 1243:
    #####: 1244:      return 0;
        -: 1245:
        -: 1246:
        -: 1247:    case embargo:
        -: 1248:      //+2 Coins
    #####: 1249:      state->coins = state->coins + 2;
        -: 1250:
        -: 1251:      //see if selected pile is in play
    #####: 1252:      if ( state->supplyCount[choice1] == -1 )
        -: 1253:	{
    #####: 1254:	  return -1;
        -: 1255:	}
        -: 1256:
        -: 1257:      //add embargo token to selected supply pile
    #####: 1258:      state->embargoTokens[choice1]++;
        -: 1259:
        -: 1260:      //trash card
    #####: 1261:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1262:      return 0;
        -: 1263:
        -: 1264:    case outpost:
    #####: 1265:      return outpostCardEffect(state, currentPlayer, handPos );
        -: 1266:
        -: 1267:    case salvager:
    #####: 1268:      return salvagerCardEffect(state, currentPlayer, handPos, choice1);
        -: 1269:
        -: 1270:    case sea_hag:
    #####: 1271:      for (i = 0; i < state->numPlayers; i++){
    #####: 1272:    if (i != currentPlayer){
    #####: 1273:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1274:    state->discardCount[i]++;
    #####: 1275:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1276:    }
        -: 1277:      }
    #####: 1278:      return 0;
        -: 1279:
        -: 1280:    case treasure_map:
        -: 1281:      //search hand for another treasure_map
    #####: 1282:      index = -1;
    #####: 1283:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1284:	{
    #####: 1285:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1286:	    {
    #####: 1287:	      index = i;
    #####: 1288:	      break;
        -: 1289:	    }
        -: 1290:	}
    #####: 1291:      if (index > -1)
        -: 1292:	{
        -: 1293:	  //trash both treasure cards
    #####: 1294:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1295:	  discardCard(index, currentPlayer, state, 1);
        -: 1296:
        -: 1297:	  //gain 4 Gold cards
    #####: 1298:	  for (i = 0; i < 4; i++)
        -: 1299:	    {
    #####: 1300:	      gainCard(gold, state, 1, currentPlayer);
        -: 1301:	    }
        -: 1302:
        -: 1303:	  //return success
    #####: 1304:	  return 1;
        -: 1305:	}
        -: 1306:
        -: 1307:      //no second treasure_map found in hand
    #####: 1308:      return -1;
        -: 1309:    }
        -: 1310:
    #####: 1311:  return -1;
        -: 1312:}
        -: 1313:
        7: 1314:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag){
        -: 1315:
        -: 1316:  //if card is not trashed, added to Played pile
        7: 1317:  if (trashFlag < 1)
        -: 1318:    {
        -: 1319:      //add card to played pile
        7: 1320:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        7: 1321:      state->playedCardCount++;
        -: 1322:    }
        -: 1323:
        -: 1324:  //set played card to -1
        7: 1325:  state->hand[currentPlayer][handPos] = -1;
        -: 1326:
        -: 1327:  //remove card from player's hand
        7: 1328:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1329:    {
        -: 1330:      //reduce number of cards in hand
        3: 1331:      state->handCount[currentPlayer]--;
        -: 1332:    }
        4: 1333:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1334:    {
        -: 1335:      //reduce number of cards in hand
    #####: 1336:      state->handCount[currentPlayer]--;
        -: 1337:    }
        -: 1338:  else
        -: 1339:    {
        -: 1340:      //replace discarded card with last card in hand
        4: 1341:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1342:      //set last card to -1
        4: 1343:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1344:      //reduce number of cards in hand
        4: 1345:      state->handCount[currentPlayer]--;
        -: 1346:    }
        -: 1347:
        7: 1348:  return 0;
        -: 1349:}
        -: 1350:
    #####: 1351:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player){
        -: 1352:  //Note: supplyPos is enum of choosen card
        -: 1353:
        -: 1354:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1355:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1356:    {
    #####: 1357:      return -1;
        -: 1358:    }
        -: 1359:
        -: 1360:  //added card for [whoseTurn] current player:
        -: 1361:  // toFlag = 0 : add to discard
        -: 1362:  // toFlag = 1 : add to deck
        -: 1363:  // toFlag = 2 : add to hand
        -: 1364:
    #####: 1365:  if (toFlag == 1)
        -: 1366:    {
    #####: 1367:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1368:      state->deckCount[player]++;
        -: 1369:    }
    #####: 1370:  else if (toFlag == 2)
        -: 1371:    {
    #####: 1372:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1373:      state->handCount[player]++;
        -: 1374:    }
        -: 1375:  else
        -: 1376:    {
    #####: 1377:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1378:      state->discardCount[player]++;
        -: 1379:    }
        -: 1380:
        -: 1381:  //decrease number in supply pile
    #####: 1382:  state->supplyCount[supplyPos]--;
        -: 1383:
    #####: 1384:  return 0;
        -: 1385:}
        -: 1386:
     4007: 1387:int updateCoins(int player, struct gameState *state, int bonus){
        -: 1388:  int i;
        -: 1389:
        -: 1390:  //reset coin count
     4007: 1391:  state->coins = 0;
        -: 1392:
        -: 1393:  //add coins for each Treasure card in player's hand
    24042: 1394:  for (i = 0; i < state->handCount[player]; i++)
        -: 1395:    {
    20035: 1396:      if (state->hand[player][i] == copper)
        -: 1397:	{
    16028: 1398:	  state->coins += 1;
        -: 1399:	}
     4007: 1400:      else if (state->hand[player][i] == silver)
        -: 1401:	{
    #####: 1402:	  state->coins += 2;
        -: 1403:	}
     4007: 1404:      else if (state->hand[player][i] == gold)
        -: 1405:	{
    #####: 1406:	  state->coins += 3;
        -: 1407:	}
        -: 1408:    }
        -: 1409:
        -: 1410:  //add bonus
     4007: 1411:  state->coins += bonus;
        -: 1412:
     4007: 1413:  return 0;
        -: 1414:}
        -: 1415:
        -: 1416:
        -: 1417://end of dominion.c
