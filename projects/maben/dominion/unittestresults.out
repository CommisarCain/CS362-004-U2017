unittest1 Test 0 : 1
unittest2 Test 0 : 1
unittest3 Test 0 : 1
unittest4 Test 0 : 1
cardtest1 Test 0 : 0
cardtest2 Test 0 : 0
cardtest3 Test 0 : 0
cardtest4 Test 0 : 0
File 'dominion.c'
Lines executed:30.26% of 585
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      215:    8:int compare(const void* a, const void* b) {
      215:    9:  if (*(int*)a > *(int*)b)
        3:   10:    return 1;
      212:   11:  if (*(int*)a < *(int*)b)
       58:   12:    return -1;
      154:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        4:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
        4:   23:  int* k = malloc(10 * sizeof(int));
        4:   24:  k[0] = k1;
        4:   25:  k[1] = k2;
        4:   26:  k[2] = k3;
        4:   27:  k[3] = k4;
        4:   28:  k[4] = k5;
        4:   29:  k[5] = k6;
        4:   30:  k[6] = k7;
        4:   31:  k[7] = k8;
        4:   32:  k[8] = k9;
        4:   33:  k[9] = k10;
        4:   34:  return k;
        -:   35:}
        -:   36:
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        1:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       67:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      662:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      602:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1132:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1050:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       38:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       16:  115:		  if (numPlayers == 2){
        8:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       30:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       38:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1012:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       20:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       14:  140:      state->deckCount[i] = 0;
       56:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       42:  143:	  state->deck[i][j] = estate;
       42:  144:	  state->deckCount[i]++;
        -:  145:	}
      112:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       98:  148:	  state->deck[i][j] = copper;
       98:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       20:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       14:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       20:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       14:  166:      state->handCount[i] = 0;
       14:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
       30:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        6:  198:  return 0;
        -:  199:}
        -:  200:
       14:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       14:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       14:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       14:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      168:  214:  while (state->deckCount[player] > 0) {
      140:  215:    card = floor(Random() * state->deckCount[player]);
      140:  216:    newDeck[newDeckPos] = state->deck[player][card];
      140:  217:    newDeckPos++;
      429:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      289:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      140:  221:    state->deckCount[player]--;
        -:  222:  }
      154:  223:  for (i = 0; i < newDeckPos; i++) {
      140:  224:    state->deck[player][i] = newDeck[i];
      140:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       14:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state){
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
        -:  249:
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:
    #####:  268:  return 0;
        -:  269:}
        -:  270:
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:
    #####:  307:  return 0;
        -:  308:}
        -:  309:
    #####:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
    #####:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
    #####:  319:int supplyCount(int card, struct gameState *state) {
    #####:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
    #####:  345:int whoseTurn(struct gameState *state) {
    #####:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
    #####:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
    #####:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
        -:  404:	{
    #####:  405:	  j++;
        -:  406:	}
        -:  407:    }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
        -:  414:}
        -:  415:
    #####:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:	{
    #####:  468:	  players[i] = -9999;
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
        -:  481:	{
    #####:  482:	  j = i;
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
        -:  492:	{
    #####:  493:	  players[i]++;
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
        -:  502:	{
    #####:  503:	  j = i;
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
        -:  512:	{
    #####:  513:	  players[i] = 1;
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
       36:  524:int drawCard(int player, struct gameState *state){
        -:  525:  int count;
        -:  526:  int deckCounter;
       36:  527:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  528:
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
    #####:  532:    for (i = 0; i < state->discardCount[player];i++){
    #####:  533:      state->deck[player][i] = state->discard[player][i];
    #####:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
    #####:  537:    state->deckCount[player] = state->discardCount[player];
    #####:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
    #####:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:
    #####:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
    #####:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:
    #####:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
    #####:  558:    if (deckCounter == 0)
    #####:  559:      return -1;
        -:  560:
    #####:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  562:    state->deckCount[player]--;
    #####:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
       36:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       36:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       36:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       36:  575:    state->deckCount[player]--;
       36:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       36:  579:  return 0;
        -:  580:}
        -:  581:
        4:  582:int getCost(int cardNumber){
        4:  583:  switch( cardNumber )
        -:  584:    {
        -:  585:    case curse:
        1:  586:      return 0;
        -:  587:    case estate:
    #####:  588:      return 2;
        -:  589:    case duchy:
    #####:  590:      return 5;
        -:  591:    case province:
        1:  592:      return 8;
        -:  593:    case copper:
    #####:  594:      return 0;
        -:  595:    case silver:
    #####:  596:      return 3;
        -:  597:    case gold:
    #####:  598:      return 6;
        -:  599:    case adventurer:
    #####:  600:      return 6;
        -:  601:    case council_room:
    #####:  602:      return 5;
        -:  603:    case feast:
    #####:  604:      return 4;
        -:  605:    case gardens:
    #####:  606:      return 4;
        -:  607:    case mine:
    #####:  608:      return 5;
        -:  609:    case remodel:
    #####:  610:      return 4;
        -:  611:    case smithy:
    #####:  612:      return 4;
        -:  613:    case village:
    #####:  614:      return 3;
        -:  615:    case baron:
    #####:  616:      return 4;
        -:  617:    case great_hall:
    #####:  618:      return 3;
        -:  619:    case minion:
    #####:  620:      return 5;
        -:  621:    case steward:
    #####:  622:      return 3;
        -:  623:    case tribute:
    #####:  624:      return 5;
        -:  625:    case ambassador:
    #####:  626:      return 3;
        -:  627:    case cutpurse:
    #####:  628:      return 4;
        -:  629:    case embargo:
    #####:  630:      return 2;
        -:  631:    case outpost:
    #####:  632:      return 5;
        -:  633:    case salvager:
    #####:  634:      return 4;
        -:  635:    case sea_hag:
    #####:  636:      return 4;
        -:  637:    case treasure_map:
    #####:  638:      return 4;
        -:  639:    }
        -:  640:
        2:  641:  return -1;
        -:  642:}
        -:  643:
        1:  644:int adventurerCardEffect(struct gameState *state, int currentPlayer, int handPos ){
        -:  645:  int i;
        -:  646:  int j;
        -:  647:  int k;
        -:  648:  int x;
        -:  649:  int index;
        1:  650:  int nextPlayer = currentPlayer + 1;
        -:  651:
        1:  652:  int tributeRevealedCards[2] = {-1, -1};
        -:  653:  int temphand[MAX_HAND];// moved above the if statement
        1:  654:  int drawntreasure = 0;
        -:  655:  int cardDrawn;
        1:  656:  int z = 0;// this is the counter for the temp hand
        1:  657:  if (nextPlayer > (state->numPlayers - 1)){
        1:  658:    nextPlayer = 0;
        -:  659:  }
        -:  660:
        5:  661:  while(drawntreasure<2){
        3:  662:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  663:  shuffle(currentPlayer, state);
        -:  664:  }
        3:  665:  drawCard(currentPlayer, state);
        3:  666:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        3:  667:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:  668:  drawntreasure++;
        -:  669:  else{
        1:  670:  temphand[z]=cardDrawn;
        1:  671:  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:  672:  z++;
        -:  673:  }
        -:  674:    }
        3:  675:    while(z-1>=0){
        1:  676:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1:  677:  z=z-1;
        -:  678:    }
        1:  679:    return 1;
        -:  680:
        -:  681:
        -:  682:
        -:  683:}
        -:  684:
        1:  685:int smithyCardEffect(struct gameState *state, int currentPlayer, int handPos ){
        -:  686:  int i;
        -:  687:  int j;
        -:  688:  int k;
        -:  689:  int x;
        -:  690:  int index;
        1:  691:  int nextPlayer = currentPlayer + 1;
        -:  692:
        1:  693:  int tributeRevealedCards[2] = {-1, -1};
        -:  694:  int temphand[MAX_HAND];// moved above the if statement
        1:  695:  int drawntreasure=1;
        -:  696:  int cardDrawn;
        1:  697:  int z = 0;// this is the counter for the temp hand
        1:  698:  if (nextPlayer > (state->numPlayers - 1)){
        1:  699:    nextPlayer = 0;
        -:  700:  }
        -:  701:  //+3 Cards
        3:  702:  for (i = 0; i < 2; i++)//should be < 3 BUGGGGGGG
        -:  703:  {
        2:  704:      drawCard(currentPlayer, state);
        -:  705:  }
        -:  706:
        -:  707:  //discard card from hand
        1:  708:  discardCard(handPos, currentPlayer, state, 0);
        1:  709:  return 0;
        -:  710:
        -:  711:}
        -:  712:
        1:  713:int greathallCardEffect(struct gameState *state, int currentPlayer, int handPos ){
        -:  714:  int i;
        -:  715:  int j;
        -:  716:  int k;
        -:  717:  int x;
        -:  718:  int index;
        1:  719:  int nextPlayer = currentPlayer + 1;
        -:  720:
        1:  721:  int tributeRevealedCards[2] = {-1, -1};
        -:  722:  int temphand[MAX_HAND];// moved above the if statement
        1:  723:  int drawntreasure=0;
        -:  724:  int cardDrawn;
        1:  725:  int z = 0;// this is the counter for the temp hand
        1:  726:  if (nextPlayer > (state->numPlayers - 1)){
        1:  727:    nextPlayer = 0;
        -:  728:  }
        -:  729:  //+1 Card
        1:  730:  drawCard(currentPlayer, state);
        -:  731:
        -:  732:  //+1 Actions
        -:  733:  //state->numActions++;
        -:  734:
        -:  735:  //discard card from hand
        1:  736:  discardCard(handPos, currentPlayer, state, 0);
        1:  737:  return 0;
        -:  738:
        -:  739:}
        -:  740:
        1:  741:int outpostCardEffect(struct gameState *state, int currentPlayer, int handPos  ){
        -:  742:  int i;
        -:  743:  int j;
        -:  744:  int k;
        -:  745:  int x;
        -:  746:  int index;
        1:  747:  int nextPlayer = currentPlayer + 1;
        -:  748:
        1:  749:  int tributeRevealedCards[2] = {-1, -1};
        -:  750:  int temphand[MAX_HAND];// moved above the if statement
        1:  751:  int drawntreasure=0;
        -:  752:  int cardDrawn;
        1:  753:  int z = 0;// this is the counter for the temp hand
        1:  754:  if (nextPlayer > (state->numPlayers - 1)){
        -:  755:    //nextPlayer = 0;
        -:  756:  }
        -:  757:  //set outpost flag
        -:  758:  //state->outpostPlayed++;// BUG THIS SHOULD NOT BE COMMENTED
        -:  759:
        -:  760:  //discard card
        1:  761:  discardCard(handPos, currentPlayer, state, 0);
        1:  762:  return 0;
        -:  763:
        -:  764:}
        -:  765:
    #####:  766:int salvagerCardEffect(struct gameState *state, int currentPlayer, int handPos, int choice1   ){
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
    #####:  772:  int nextPlayer = currentPlayer + 1;
        -:  773:
    #####:  774:  int tributeRevealedCards[2] = {-1, -1};
        -:  775:  int temphand[MAX_HAND];// moved above the if statement
    #####:  776:  int drawntreasure=0;
        -:  777:  int cardDrawn;
    #####:  778:  int z = 0;// this is the counter for the temp hand
    #####:  779:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  780:    nextPlayer = 0;
        -:  781:  }
        -:  782:  //+1 buy
    #####:  783:  state->numBuys++;
        -:  784:
    #####:  785:  if (choice1)
        -:  786:  {
        -:  787:  //gain coins equal to trashed card
    #####:  788:  state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  789:  //trash card
    #####:  790:  discardCard(choice1, currentPlayer, state, 1);
        -:  791:  }
        -:  792:
        -:  793:  //discard card
    #####:  794:  discardCard(handPos, currentPlayer, state, 0);
    #####:  795:  return 0;
        -:  796:
        -:  797:
        -:  798:
        -:  799:}
        -:  800:
    #####:  801:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus){
        -:  802:  int i;
        -:  803:  int j;
        -:  804:  int k;
        -:  805:  int x;
        -:  806:  int index;
    #####:  807:  int currentPlayer = whoseTurn(state);
    #####:  808:  int nextPlayer = currentPlayer + 1;
        -:  809:
    #####:  810:  int tributeRevealedCards[2] = {-1, -1};
        -:  811:  int temphand[MAX_HAND];// moved above the if statement
    #####:  812:  int drawntreasure=0;
        -:  813:  int cardDrawn;
    #####:  814:  int z = 0;// this is the counter for the temp hand
    #####:  815:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  816:    nextPlayer = 0;
        -:  817:  }
        -:  818:
        -:  819:
        -:  820:  //uses switch to select card and perform actions
    #####:  821:  switch( card )
        -:  822:    {
        -:  823:    case adventurer:
    #####:  824:        return adventurerCardEffect(state, currentPlayer, handPos);
        -:  825:
        -:  826:    case council_room:
        -:  827:      //+4 Cards
    #####:  828:      for (i = 0; i < 4; i++)
        -:  829:    {
    #####:  830:    drawCard(currentPlayer, state);
        -:  831:    }
        -:  832:
        -:  833:      //+1 Buy
    #####:  834:      state->numBuys++;
        -:  835:
        -:  836:      //Each other player draws a card
    #####:  837:      for (i = 0; i < state->numPlayers; i++)
        -:  838:    {
    #####:  839:    if ( i != currentPlayer )
        -:  840:      {
    #####:  841:        drawCard(i, state);
        -:  842:      }
        -:  843:    }
        -:  844:
        -:  845:    //put played card in played card pile
    #####:  846:    discardCard(handPos, currentPlayer, state, 0);
        -:  847:
    #####:  848:    return 0;
        -:  849:
        -:  850:    case feast:
        -:  851:      //gain card with cost up to 5
        -:  852:      //Backup hand
    #####:  853:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  854:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  855:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  856:      }
        -:  857:      //Backup hand
        -:  858:
        -:  859:      //Update Coins for Buy
    #####:  860:      updateCoins(currentPlayer, state, 5);
    #####:  861:      x = 1;//Condition to loop on
    #####:  862:      while( x == 1) {//Buy one card
    #####:  863:	if (supplyCount(choice1, state) <= 0){
        -:  864:	  if (DEBUG)
        -:  865:	    printf("None of that card left, sorry!\n");
        -:  866:
        -:  867:	  if (DEBUG){
        -:  868:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  869:	  }
        -:  870:	}
    #####:  871:	else if (state->coins < getCost(choice1)){
    #####:  872:	  printf("That card is too expensive!\n");
        -:  873:
        -:  874:	  if (DEBUG){
        -:  875:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  876:	  }
        -:  877:	}
        -:  878:	else{
        -:  879:
        -:  880:	  if (DEBUG){
        -:  881:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  882:	  }
        -:  883:
    #####:  884:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  885:	  x = 0;//No more buying cards
        -:  886:
        -:  887:	  if (DEBUG){
        -:  888:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  889:	  }
        -:  890:
        -:  891:	}
        -:  892:      }
        -:  893:
        -:  894:      //Reset Hand
    #####:  895:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  896:	state->hand[currentPlayer][i] = temphand[i];
    #####:  897:	temphand[i] = -1;
        -:  898:      }
        -:  899:      //Reset Hand
        -:  900:
    #####:  901:      return 0;
        -:  902:
        -:  903:    case gardens:
    #####:  904:      return -1;
        -:  905:
        -:  906:    case mine:
    #####:  907:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  908:
    #####:  909:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  910:	{
    #####:  911:	  return -1;
        -:  912:	}
        -:  913:
    #####:  914:      if (choice2 > treasure_map || choice2 < curse)
        -:  915:	{
    #####:  916:	  return -1;
        -:  917:	}
        -:  918:
    #####:  919:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  920:	{
    #####:  921:	  return -1;
        -:  922:	}
        -:  923:
    #####:  924:      gainCard(choice2, state, 2, currentPlayer);
        -:  925:
        -:  926:      //discard card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
        -:  928:
        -:  929:      //discard trashed card
    #####:  930:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  931:	{
    #####:  932:	  if (state->hand[currentPlayer][i] == j)
        -:  933:	    {
    #####:  934:	      discardCard(i, currentPlayer, state, 0);
    #####:  935:	      break;
        -:  936:	    }
        -:  937:	}
        -:  938:
    #####:  939:      return 0;
        -:  940:
        -:  941:    case remodel:
    #####:  942:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  943:
    #####:  944:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  945:	{
    #####:  946:	  return -1;
        -:  947:	}
        -:  948:
    #####:  949:      gainCard(choice2, state, 0, currentPlayer);
        -:  950:
        -:  951:      //discard card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
        -:  953:
        -:  954:      //discard trashed card
    #####:  955:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  956:	{
    #####:  957:	  if (state->hand[currentPlayer][i] == j)
        -:  958:	    {
    #####:  959:	      discardCard(i, currentPlayer, state, 0);
    #####:  960:	      break;
        -:  961:	    }
        -:  962:	}
        -:  963:
        -:  964:
    #####:  965:      return 0;
        -:  966:
        -:  967:    case smithy:
    #####:  968:      return smithyCardEffect(state, currentPlayer, handPos );
        -:  969:
        -:  970:    case village:
        -:  971:      //+1 Card
    #####:  972:      drawCard(currentPlayer, state);
        -:  973:
        -:  974:      //+2 Actions
    #####:  975:      state->numActions = state->numActions + 2;
        -:  976:
        -:  977:      //discard played card from hand
    #####:  978:      discardCard(handPos, currentPlayer, state, 0);
    #####:  979:      return 0;
        -:  980:
        -:  981:    case baron:
    #####:  982:      state->numBuys++;//Increase buys by 1!
    #####:  983:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  984:	int p = 0;//Iterator for hand!
    #####:  985:	int card_not_discarded = 1;//Flag for discard set!
    #####:  986:	while(card_not_discarded){
    #####:  987:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  988:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  989:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  990:	    state->discardCount[currentPlayer]++;
    #####:  991:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  992:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  993:	    }
    #####:  994:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  995:	    state->handCount[currentPlayer]--;
    #####:  996:	    card_not_discarded = 0;//Exit the loop
        -:  997:	  }
    #####:  998:	  else if (p > state->handCount[currentPlayer]){
        -:  999:	    if(DEBUG) {
        -: 1000:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1001:	      printf("Must gain an estate if there are any\n");
        -: 1002:	    }
    #####: 1003:	    if (supplyCount(estate, state) > 0){
    #####: 1004:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1005:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1006:	      if (supplyCount(estate, state) == 0){
    #####: 1007:		isGameOver(state);
        -: 1008:	      }
        -: 1009:	    }
    #####: 1010:	    card_not_discarded = 0;//Exit the loop
        -: 1011:	  }
        -: 1012:
        -: 1013:	  else{
    #####: 1014:	    p++;//Next card
        -: 1015:	  }
        -: 1016:	}
        -: 1017:      }
        -: 1018:
        -: 1019:      else{
    #####: 1020:	if (supplyCount(estate, state) > 0){
    #####: 1021:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1022:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1023:	  if (supplyCount(estate, state) == 0){
    #####: 1024:	    isGameOver(state);
        -: 1025:	  }
        -: 1026:	}
        -: 1027:      }
        -: 1028:
        -: 1029:
    #####: 1030:      return 0;
        -: 1031:
        -: 1032:    case great_hall:
    #####: 1033:      return greathallCardEffect(state, currentPlayer, handPos );
        -: 1034:
        -: 1035:    case minion:
        -: 1036:      //+1 action
    #####: 1037:      state->numActions++;
        -: 1038:
        -: 1039:      //discard card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);
        -: 1041:
    #####: 1042:      if (choice1)		//+2 coins
        -: 1043:	{
    #####: 1044:	  state->coins = state->coins + 2;
        -: 1045:	}
        -: 1046:
    #####: 1047:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1048:	{
        -: 1049:	  //discard hand
    #####: 1050:	  while(numHandCards(state) > 0)
        -: 1051:	    {
    #####: 1052:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1053:	    }
        -: 1054:
        -: 1055:	  //draw 4
    #####: 1056:	  for (i = 0; i < 4; i++)
        -: 1057:	    {
    #####: 1058:	      drawCard(currentPlayer, state);
        -: 1059:	    }
        -: 1060:
        -: 1061:	  //other players discard hand and redraw if hand size > 4
    #####: 1062:	  for (i = 0; i < state->numPlayers; i++)
        -: 1063:	    {
    #####: 1064:	      if (i != currentPlayer)
        -: 1065:		{
    #####: 1066:		  if ( state->handCount[i] > 4 )
        -: 1067:		    {
        -: 1068:		      //discard hand
    #####: 1069:		      while( state->handCount[i] > 0 )
        -: 1070:			{
    #####: 1071:			  discardCard(handPos, i, state, 0);
        -: 1072:			}
        -: 1073:
        -: 1074:		      //draw 4
    #####: 1075:		      for (j = 0; j < 4; j++)
        -: 1076:			{
    #####: 1077:			  drawCard(i, state);
        -: 1078:			}
        -: 1079:		    }
        -: 1080:		}
        -: 1081:	    }
        -: 1082:
        -: 1083:	}
    #####: 1084:      return 0;
        -: 1085:
        -: 1086:    case steward:
    #####: 1087:      if (choice1 == 1)
        -: 1088:	{
        -: 1089:	  //+2 cards
    #####: 1090:	  drawCard(currentPlayer, state);
    #####: 1091:	  drawCard(currentPlayer, state);
        -: 1092:	}
    #####: 1093:      else if (choice1 == 2)
        -: 1094:	{
        -: 1095:	  //+2 coins
    #####: 1096:	  state->coins = state->coins + 2;
        -: 1097:	}
        -: 1098:      else
        -: 1099:	{
        -: 1100:	  //trash 2 cards in hand
    #####: 1101:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1102:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1103:	}
        -: 1104:
        -: 1105:      //discard card from hand
    #####: 1106:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1107:      return 0;
        -: 1108:
        -: 1109:    case tribute:
    #####: 1110:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1111:	if (state->deckCount[nextPlayer] > 0){
    #####: 1112:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1113:	  state->deckCount[nextPlayer]--;
        -: 1114:	}
    #####: 1115:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1116:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1117:	  state->discardCount[nextPlayer]--;
        -: 1118:	}
        -: 1119:	else{
        -: 1120:	  //No Card to Reveal
        -: 1121:	  if (DEBUG){
        -: 1122:	    printf("No cards to reveal\n");
        -: 1123:	  }
        -: 1124:	}
        -: 1125:      }
        -: 1126:
        -: 1127:      else{
    #####: 1128:	if (state->deckCount[nextPlayer] == 0){
    #####: 1129:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1130:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1131:	    state->deckCount[nextPlayer]++;
    #####: 1132:	    state->discard[nextPlayer][i] = -1;
    #####: 1133:	    state->discardCount[nextPlayer]--;
        -: 1134:	  }
        -: 1135:
    #####: 1136:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1137:	}
    #####: 1138:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1139:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1140:	state->deckCount[nextPlayer]--;
    #####: 1141:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1142:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1143:	state->deckCount[nextPlayer]--;
        -: 1144:      }
        -: 1145:
    #####: 1146:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1147:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1148:	state->playedCardCount++;
    #####: 1149:	tributeRevealedCards[1] = -1;
        -: 1150:      }
        -: 1151:
    #####: 1152:      for (i = 0; i <= 2; i ++){
    #####: 1153:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1154:	  state->coins += 2;
        -: 1155:	}
        -: 1156:
    #####: 1157:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1158:	  drawCard(currentPlayer, state);
    #####: 1159:	  drawCard(currentPlayer, state);
        -: 1160:	}
        -: 1161:	else{//Action Card
    #####: 1162:	  state->numActions = state->numActions + 2;
        -: 1163:	}
        -: 1164:      }
        -: 1165:
    #####: 1166:      return 0;
        -: 1167:
        -: 1168:    case ambassador:
    #####: 1169:      j = 0;		//used to check if player has enough cards to discard
        -: 1170:
    #####: 1171:      if (choice2 > 2 || choice2 < 0)
        -: 1172:	{
    #####: 1173:	  return -1;
        -: 1174:	}
        -: 1175:
    #####: 1176:      if (choice1 == handPos)
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:
    #####: 1181:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1182:	{
    #####: 1183:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1184:	    {
    #####: 1185:	      j++;
        -: 1186:	    }
        -: 1187:	}
    #####: 1188:      if (j < choice2)
        -: 1189:	{
    #####: 1190:	  return -1;
        -: 1191:	}
        -: 1192:
        -: 1193:      if (DEBUG)
        -: 1194:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1195:
        -: 1196:      //increase supply count for choosen card by amount being discarded
    #####: 1197:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1198:
        -: 1199:      //each other player gains a copy of revealed card
    #####: 1200:      for (i = 0; i < state->numPlayers; i++)
        -: 1201:	{
    #####: 1202:	  if (i != currentPlayer)
        -: 1203:	    {
    #####: 1204:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1205:	    }
        -: 1206:	}
        -: 1207:
        -: 1208:      //discard played card from hand
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
        -: 1210:
        -: 1211:      //trash copies of cards returned to supply
    #####: 1212:      for (j = 0; j < choice2; j++)
        -: 1213:	{
    #####: 1214:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1215:	    {
    #####: 1216:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1217:		{
    #####: 1218:		  discardCard(i, currentPlayer, state, 1);
    #####: 1219:		  break;
        -: 1220:		}
        -: 1221:	    }
        -: 1222:	}
        -: 1223:
    #####: 1224:      return 0;
        -: 1225:
        -: 1226:    case cutpurse:
        -: 1227:
    #####: 1228:      updateCoins(currentPlayer, state, 2);
    #####: 1229:      for (i = 0; i < state->numPlayers; i++)
        -: 1230:	{
    #####: 1231:	  if (i != currentPlayer)
        -: 1232:	    {
    #####: 1233:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1234:		{
    #####: 1235:		  if (state->hand[i][j] == copper)
        -: 1236:		    {
    #####: 1237:		      discardCard(j, i, state, 0);
    #####: 1238:		      break;
        -: 1239:		    }
    #####: 1240:		  if (j == state->handCount[i])
        -: 1241:		    {
    #####: 1242:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1243:			{
        -: 1244:			  if (DEBUG)
        -: 1245:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1246:			}
    #####: 1247:		      break;
        -: 1248:		    }
        -: 1249:		}
        -: 1250:
        -: 1251:	    }
        -: 1252:
        -: 1253:	}
        -: 1254:
        -: 1255:      //discard played card from hand
    #####: 1256:      discardCard(handPos, currentPlayer, state, 0);
        -: 1257:
    #####: 1258:      return 0;
        -: 1259:
        -: 1260:
        -: 1261:    case embargo:
        -: 1262:      //+2 Coins
    #####: 1263:      state->coins = state->coins + 2;
        -: 1264:
        -: 1265:      //see if selected pile is in play
    #####: 1266:      if ( state->supplyCount[choice1] == -1 )
        -: 1267:	{
    #####: 1268:	  return -1;
        -: 1269:	}
        -: 1270:
        -: 1271:      //add embargo token to selected supply pile
    #####: 1272:      state->embargoTokens[choice1]++;
        -: 1273:
        -: 1274:      //trash card
    #####: 1275:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1276:      return 0;
        -: 1277:
        -: 1278:    case outpost:
    #####: 1279:      return outpostCardEffect(state, currentPlayer, handPos );
        -: 1280:
        -: 1281:    case salvager:
    #####: 1282:      return salvagerCardEffect(state, currentPlayer, handPos, choice1);
        -: 1283:
        -: 1284:    case sea_hag:
    #####: 1285:      for (i = 0; i < state->numPlayers; i++){
    #####: 1286:    if (i != currentPlayer){
    #####: 1287:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1288:    state->discardCount[i]++;
    #####: 1289:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1290:    }
        -: 1291:      }
    #####: 1292:      return 0;
        -: 1293:
        -: 1294:    case treasure_map:
        -: 1295:      //search hand for another treasure_map
    #####: 1296:      index = -1;
    #####: 1297:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1298:	{
    #####: 1299:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1300:	    {
    #####: 1301:	      index = i;
    #####: 1302:	      break;
        -: 1303:	    }
        -: 1304:	}
    #####: 1305:      if (index > -1)
        -: 1306:	{
        -: 1307:	  //trash both treasure cards
    #####: 1308:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1309:	  discardCard(index, currentPlayer, state, 1);
        -: 1310:
        -: 1311:	  //gain 4 Gold cards
    #####: 1312:	  for (i = 0; i < 4; i++)
        -: 1313:	    {
    #####: 1314:	      gainCard(gold, state, 1, currentPlayer);
        -: 1315:	    }
        -: 1316:
        -: 1317:	  //return success
    #####: 1318:	  return 1;
        -: 1319:	}
        -: 1320:
        -: 1321:      //no second treasure_map found in hand
    #####: 1322:      return -1;
        -: 1323:    }
        -: 1324:
    #####: 1325:  return -1;
        -: 1326:}
        -: 1327:
        3: 1328:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag){
        -: 1329:
        -: 1330:  //if card is not trashed, added to Played pile
        3: 1331:  if (trashFlag < 1)
        -: 1332:    {
        -: 1333:      //add card to played pile
        3: 1334:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        3: 1335:      state->playedCardCount++;
        -: 1336:    }
        -: 1337:
        -: 1338:  //set played card to -1
        3: 1339:  state->hand[currentPlayer][handPos] = -1;
        -: 1340:
        -: 1341:  //remove card from player's hand
        3: 1342:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1343:    {
        -: 1344:      //reduce number of cards in hand
        1: 1345:      state->handCount[currentPlayer]--;
        -: 1346:    }
        2: 1347:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1348:    {
        -: 1349:      //reduce number of cards in hand
        1: 1350:      state->handCount[currentPlayer]--;
        -: 1351:    }
        -: 1352:  else
        -: 1353:    {
        -: 1354:      //replace discarded card with last card in hand
        1: 1355:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1356:      //set last card to -1
        1: 1357:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1358:      //reduce number of cards in hand
        1: 1359:      state->handCount[currentPlayer]--;
        -: 1360:    }
        -: 1361:
        3: 1362:  return 0;
        -: 1363:}
        -: 1364:
    #####: 1365:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player){
        -: 1366:  //Note: supplyPos is enum of choosen card
        -: 1367:
        -: 1368:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1369:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1370:    {
    #####: 1371:      return -1;
        -: 1372:    }
        -: 1373:
        -: 1374:  //added card for [whoseTurn] current player:
        -: 1375:  // toFlag = 0 : add to discard
        -: 1376:  // toFlag = 1 : add to deck
        -: 1377:  // toFlag = 2 : add to hand
        -: 1378:
    #####: 1379:  if (toFlag == 1)
        -: 1380:    {
    #####: 1381:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1382:      state->deckCount[player]++;
        -: 1383:    }
    #####: 1384:  else if (toFlag == 2)
        -: 1385:    {
    #####: 1386:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1387:      state->handCount[player]++;
        -: 1388:    }
        -: 1389:  else
        -: 1390:    {
    #####: 1391:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1392:      state->discardCount[player]++;
        -: 1393:    }
        -: 1394:
        -: 1395:  //decrease number in supply pile
    #####: 1396:  state->supplyCount[supplyPos]--;
        -: 1397:
    #####: 1398:  return 0;
        -: 1399:}
        -: 1400:
        6: 1401:int updateCoins(int player, struct gameState *state, int bonus){
        -: 1402:  int i;
        -: 1403:
        -: 1404:  //reset coin count
        6: 1405:  state->coins = 0;
        -: 1406:
        -: 1407:  //add coins for each Treasure card in player's hand
       36: 1408:  for (i = 0; i < state->handCount[player]; i++)
        -: 1409:    {
       30: 1410:      if (state->hand[player][i] == copper)
        -: 1411:	{
       26: 1412:	  state->coins += 1;
        -: 1413:	}
        4: 1414:      else if (state->hand[player][i] == silver)
        -: 1415:	{
    #####: 1416:	  state->coins += 2;
        -: 1417:	}
        4: 1418:      else if (state->hand[player][i] == gold)
        -: 1419:	{
    #####: 1420:	  state->coins += 3;
        -: 1421:	}
        -: 1422:    }
        -: 1423:
        -: 1424:  //add bonus
        6: 1425:  state->coins += bonus;
        -: 1426:
        6: 1427:  return 0;
        -: 1428:}
        -: 1429:
        -: 1430:
        -: 1431://end of dominion.c
